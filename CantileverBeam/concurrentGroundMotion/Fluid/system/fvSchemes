/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
	div(rhoPhi,U) Gauss linearUpwindV cellLimited Gauss linear 1;
    div(U)  Gauss linearUpwindV cellLimited Gauss linear 1;
    div((rhoPhi|interpolate(porosity)),U)  Gauss limitedLinearV 1;
    div(rhoPhiPor,UPor)  Gauss linearUpwindV cellLimited Gauss linear 1;
    div(rhoPhi,UPor)  Gauss linearUpwindV cellLimited Gauss linear 1;
    div(rhoPhiPor,U)   Gauss linearUpwindV cellLimited Gauss linear 1;
    div(phi,alpha)  Gauss vanLeer01;
    div(phirb,alpha) Gauss upwind; \\interfaceCompression;
    div((muEff*dev(T(grad(U))))) Gauss linearUpwindV cellLimited Gauss linear 1;
    div(phi,epsilon) Gauss upwind;
    div((phi|interpolate(porosity)),k)      Gauss upwind;
    div((phi|interpolate(porosity)),epsilon) Gauss upwind;
    div(phi,k)      Gauss linearUpwind limitedGrad;
    div(phi,omega)  Gauss linearUpwind limitedGrad;
    div((phi|interpolate(porosity)),omega) Gauss upwind;
	div((nuEff*dev2(T(grad(U))))) Gauss upwind;
	div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
    laplacian(yPsi) Gauss linear corrected;

}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p_rgh;
    pcorr;
    alpha.water;
}

wallDist
{
  method          Poisson;
  //method          meshWave;
}


// ************************************************************************* //
